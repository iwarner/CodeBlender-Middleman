-##
-# Autocomplete
-#
-# @usage
-# -# Autocomplete
-# = codeBlender "autocomplete", "social/google/autocomplete"
-#
-# @author   Ian Warner <ian.warner@drykiss.com>
-# @category social
-##

-# Type
- type = locals[ :type ] ? locals[ :type ] : 'geocode'

-# Country - ISO 3166-1 Alpha-2 compatible country code
-# Defaults to Ireland
- country = locals[ :country ] ? locals[ :country ] : 'ie'

-# Force selection
- forceSelection = locals[ :force ] ? locals[ :force ] : 'true'

-# Button
- button = locals[ :button ] ? { append: { extraClass: "findFood__button", text: string( :"findFood.input.button" ), type: "submit" } } : false

-# Find food form
%form.findFood__form{ name: "autocompleteForm", novalidate: true, role: "form", ng: { submit: "autocomplete.submit( $event, autocompleteForm.$valid )" } }

    -# Input - Google Places Search Box
    = codeBlender "input", "atom/form/input",
      { button: button,
        input:  { autocomplete:    false,
                  data:            { country: country, forceSelection: forceSelection, type: type },
                  extraClass:      "googlePlacesAutocomplete",
                  inputGroupClass: "input-group input-group-lg",
                  name:            "place",
                  ng:              { model: "googlePlacesAutocompleteModel" },
                  placeholder:     string( :"findFood.input.placeholder" ),
                  required:        true,
                  showError:       false },
        label:  { title: string( :"findFood.input.label" ), extraClass: locals[ :extraClass ] ? locals[ :extraClass ] : false } }

-# Find food error
.findFood__error.ng-cloak{ ng: { if: "autocomplete.showError" } }

    %p{ ng: { if: "autocomplete.showErrorBlank" } }
        = string :"findFood.error.blank"

    %p{ ng: { if: "autocomplete.showErrorNoService" } }
        = string :"findFood.error.noService"

    %p{ ng: { if: "autocomplete.showErrorYQL" } }
        {{ autocomplete.errorMessage }}
