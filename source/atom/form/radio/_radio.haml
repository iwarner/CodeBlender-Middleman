-##
-# Radio
-#
-# Locals
-# aria      - Aria Elements
-#     label     - string - optional - If no elements describe this then add text
-#     labeledby - string - optional - Use a list of ids that describe this element
-# autofocus - bool   - optional - Whether this input should be autofocused
-# disabled  - bool   - optional - Disabled
-# help      - string - optional - Help text
-# inline    - bool   - optional - Whether the checkboxes should be inline
-# name      - string - required - Name of the field
-# required  - bool   - optional - If validation is required
-# tabindex  - int    - optional - Tabindex for the element
-# text      - string - optional - Text next to the checkbox if required
-# value     - string - optional - Input value
-#
-# @usage
-# -# Radio
-# = codeBlender "radio", "atom/form/radio", { input: { name: "radio" }, label: { text: "label" } }
-#
-# @author   Ian Warner <ian.warner@drykiss.com>
-# @category atom
-# @see      http://getbootstrap.com/css/#forms-controls
-##

-# Variable
- input      = locals[ :input ]
- label      = locals[ :label ]

-# Variable
- extraClass = label[ :extraClass ] ? label[ :extraClass ] : false

-# Capture content
- captureHTML = capture_html do

    -# Label - note this is an array as it contains flag for screen reader
    %label{ class: extraClass }

        -# Check for Aria - requires input to be present
        - if input && input[ :aria ].present?
            - aria = input[ :aria ]

        -# Input
        %input{ aria:      aria                ? aria               : false,
                autofocus: input[ :autofocus ] ? "autofocus"        : false,
                checked:   input[ :checked ]   ? "checked"          : false,
                disabled:  input[ :disabled ]  ? "disabled"         : false,
                id:        input[ :name ]      ? input[ :name ]     : false,
                name:      input[ :name ]      ? input[ :name ]     : false,
                ng:        input[ :ng ]        ? input[ :ng ]       : false,
                required:  input[ :required ]  ? "required"         : false,
                tabindex:  input[ :tabindex ]  ? input[ :tabindex ] : false,
                type:      "radio",
                value:     input[ :value ]     ? input[ :value ]    : false }

        -# Text
        - if label[ :title ]
            = string label[ :title ]

    -##
    -# Help Block
    -# Sometimes this should be hidden to allow errors to be added inside.
    -# Assume if l[ :help ] is a "true" Bool only then add class hidden and no text
    -# @see http://getbootstrap.com/css/#forms-help-text
    -##
    - if locals[ :help ]

        %span.help-block{ id: input[ :name ], class: !!help == help ? "hidden" : false }

            -# Help should be a string to show the text otherwise leave blank
            - if help.is_a?( String )
                = help

-# Radio
-# Do not show this for in-line control
- if ! extraClass.include? "radio-inline"

    -# Variable
    - extraClass = locals[ :extraClass ] ? locals[ :extraClass ]  : false

    -# Radio
    .radio{ class: extraClass }
        = captureHTML

    -# Inline radio
- else
    = captureHTML